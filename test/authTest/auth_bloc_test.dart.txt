import 'dart:async';

import 'package:http/http.dart' as http;
import 'package:bloc_test/bloc_test.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:hagerawi_app/auth/bloc/auth_event.dart';
import 'package:hagerawi_app/auth/bloc/auth_state.dart';
import 'package:hagerawi_app/auth/models/auth_model.dart';
import 'package:hagerawi_app/auth/repository/auth_repo.dart';
import 'package:hagerawi_app/auth/screens/signup.dart';
import 'package:hagerawi_app/auth/bloc/auth_bloc.dart';
import 'package:flutter_test/flutter_test.dart';

class MockAuthBloc extends MockBloc<AuthEvent, AuthState> implements AuthBloc {}

void main() {
  group('Authbloc login test', () {
    blocTest<AuthBloc, AuthState>(
      'On submit login',
      build: () {
        final AuthRepo authRepo = AuthRepo((http.Client()));
        return AuthBloc(authRepo);
      },
      act: (bloc) {
        return bloc.add(LoginInprogress());
      },
      wait: const Duration(milliseconds: 500),
      expect: () {
        return [isA<LoggedIn>(), isA<LoggedIn>()];
      },
    );
  });
  group('Authbloc register test', () {
    blocTest<AuthBloc, AuthState>(
      'emits [] when nothing is added',
      build: () {
        final AuthRepo authRepo = AuthRepo((http.Client()));
        return AuthBloc(authRepo);
      },
      expect: () => <AuthState>[],
    );

    blocTest<AuthBloc, AuthState>(
      'Signup submitted',
      build: () {
        final AuthRepo authRepo = AuthRepo((http.Client()));
        return AuthBloc(authRepo: authRepo);
      },
      act: (bloc) {
        return bloc.add(SignupSucess());
      },
      wait: const Duration(milliseconds: 500),
      expect: () {
        return [isA<AuthState>(), isA<AuthState>()];
      },
    );
  });
}
